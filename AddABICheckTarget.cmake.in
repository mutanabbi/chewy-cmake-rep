cmake_policy(SET CMP0011 NEW)
cmake_policy(SET CMP0057 NEW)                           # Use new `IN_LIST` subcommand of `if`

#BEGIN Configurable things
# TODO Allow to be configurable out of this module?
set(
    _compiler_options_to_ignore
    "-Werror"
    "-Wall"
    "-Wextra"
    "-g"
    "-ggdb"
    "-ggdb3"
    "-fPIC"
  )
#END Configurable things
set(ABI_COMPLIANCE_CHECKER_EXECUTABLE "@ABI_COMPLIANCE_CHECKER_EXECUTABLE@")
set(JQ_EXECUTABLE "@JQ_EXECUTABLE@")
set(ABI_CHECK_SEND_IF_NOT_FOUND "@ABI_CHECK_SEND_IF_NOT_FOUND@")

set(add_abi_check_target_ABI_CHECK_OPTIONS "@add_abi_check_target_ABI_CHECK_OPTIONS@")
set(add_abi_check_target_ABI_CHECKER_DIR "@add_abi_check_target_ABI_CHECKER_DIR@")
set(add_abi_check_target_ARTIFACTORY_REPO "@add_abi_check_target_ARTIFACTORY_REPO@")
set(add_abi_check_target_BUILD_TYPE "@CMAKE_BUILD_TYPE@")
set(add_abi_check_target_COMPILE_DB "@CMAKE_BINARY_DIR@/compile_commands.json")
set(add_abi_check_target_COMPILER_VERSION "@CMAKE_CXX_COMPILER_VERSION@")
set(add_abi_check_target_CURRENT_BINARY_DIR "@CMAKE_CURRENT_BINARY_DIR@")
set(add_abi_check_target_CURRENT_SOURCE_DIR "@CMAKE_CURRENT_SOURCE_DIR@")
set(add_abi_check_target_CXX_STANDARD "@CMAKE_CXX_STANDARD@")
set(add_abi_check_target_DEBUG "@add_abi_check_target_DEBUG@")
set(add_abi_check_target_DIRECTORY "@add_abi_check_target_DIRECTORY@")
set(add_abi_check_target_DUMP_FILE "@add_abi_check_target_DUMP_FILE@")
set(add_abi_check_target_HEADERS "@add_abi_check_target_HEADERS@")
set(add_abi_check_target_LATEST_DUMP_FILE "@add_abi_check_target_LATEST_DUMP_FILE@")
set(add_abi_check_target_PROJECT_NAME "@PROJECT_NAME@")
set(add_abi_check_target_PROJECT_VERSION "@PROJECT_VERSION@")
set(add_abi_check_target_SKIP_HEADERS "@add_abi_check_target_SKIP_HEADERS@")
set(add_abi_check_target_SOURCES "@add_abi_check_target_SOURCES@")
set(add_abi_check_target_TARGET "@add_abi_check_target_TARGET@")
set(add_abi_check_target_TARGET_PROPS_FILE "@add_abi_check_target_TARGET_PROPS_FILE@")
set(add_abi_check_target_VERSION "@add_abi_check_target_VERSION@")
set(add_abi_check_target_XML_DESCRIPTOR "@add_abi_check_target_XML_DESCRIPTOR@")
set(add_abi_check_target_XML_TEMPLATE "@_ADD_ABI_CHECK_TARGET_XML_TEMPLATE@")

include("${add_abi_check_target_TARGET_PROPS_FILE}")

#BEGIN Locally reusable functions
function(_join VALUES GLUE OUTPUT)
  string(REPLACE ";" "${GLUE}" _tmp_str "${VALUES}")
  set(${OUTPUT} "${_tmp_str}" PARENT_SCOPE)
endfunction()

function(_debug_spam MSG)
    if(add_abi_check_target_DEBUG)
        message(STATUS "  [add_abi_check_target] ${MSG}")
    endif()
endfunction()
#END Locally reusable functions

if(NOT add_abi_check_target_DEBUG AND "$ENV{VERBOSE}")
    set(add_abi_check_target_DEBUG ON)
endif()

if(NOT add_abi_check_target_CXX_STANDARD)
    set(add_abi_check_target_CXX_STANDARD "")
elseif(add_abi_check_target_CXX_STANDARD STREQUAL "11")
    set(add_abi_check_target_CXX_STANDARD "-c++11")
elseif(add_abi_check_target_CXX_STANDARD STREQUAL "14")
    set(add_abi_check_target_CXX_STANDARD "-c++14")
else()
    message(FATAL_ERROR "Unknown C++ standard: ${add_abi_check_target_CXX_STANDARD}")
endif()

if(NOT add_abi_check_target_DIRECTORY)
    if(add_abi_check_target_TARGET_FILE_DIR)
        set(add_abi_check_target_DIRECTORY "${add_abi_check_target_TARGET_FILE_DIR}")
    else()
        message(FATAL_ERROR "Unable to get the target library location")
    endif()
endif()

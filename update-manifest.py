#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Update manifest file for chewy repository
#
#

import portage.output
import os
import re
import sys
import urllib.parse

log = portage.output.EOutput()
_SCAN_RANGE = 10
_CHEWY_REPOSITORY_DEFAULT_URL = 'https://raw.github.com/mutanabbi/chewy-cmake-rep/master/'
_X_META_REPOBASE = '# X-Chewy-RepoBase: '
_IGNORE_PATH = [
    re.compile('\\.git')
  , re.compile('README.md')
  , re.compile('manifest')
  , re.compile('update-manifest.py')
  ]
_X_META_REGEX = re.compile('^\s*#\s+X-Chewy-([^:]+):\s*(.*)\s*$')
_URL_META = 'URL'
_VERSION_META = 'Version'
_DESCRIPTION_META = 'Description'
_MANIFEST_FILENAME = 'manifest'
_MANIFEST_HEADER = '''#
# ATTENTION DO NOT EDIT! This file was generated by `update-manifest.py`!
#
'''

def getMetaInfo(filename):
    f = open(filename, 'rt')
    lines = f.read().split('\n')
    meta_lines = lines[:_SCAN_RANGE] + lines[-_SCAN_RANGE:]
    meta = {}
    for line in meta_lines:
        m = _X_META_REGEX.search(line)
        if m:
            meta[m.group(1)] = m.group(2)
    # Analyze meta
    if _URL_META not in meta:
        log.eerror('URL meta not found in ' + filename)
        return
    if _VERSION_META not in meta:
        log.eerror('Version meta not found in ' + filename)
        return
    result = meta[_URL_META] + ' ' + meta[_VERSION_META]
    if _DESCRIPTION_META in meta:
        result += ' ' + urllib.parse.quote_plus(meta[_DESCRIPTION_META])
    return result

def mustBeIgnored(entry):
    for expr in _IGNORE_PATH:
        if expr.match(entry):
            return True
    return False

def scanDir(base_path):
    this_level_result = []
    log.einfo('Scanning directory ' + base_path + ' for files...')
    for entry in os.listdir(base_path):
        current = base_path + entry
        if mustBeIgnored(entry):
            continue
        if os.path.isdir(entry):
            this_level_result += scanDir(entry)
        elif os.path.isfile(entry):
            meta_line = getMetaInfo(entry)
            if meta_line:
                this_level_result.append(meta_line)
    return this_level_result

def main():
    # Get repository base URL
    if len(sys.argv) < 2:
        repo_url = _CHEWY_REPOSITORY_DEFAULT_URL
    else:
        # TODO Validate URL
        repo_url = sys.argv[1]

    log.einfo('Set repo base directory to ' + repo_url)
    # Walk through the current directory down and find all files
    result = scanDir(os.curdir)
    manifest = open(_MANIFEST_FILENAME, 'wt')
    manifest.write(_X_META_REPOBASE + repo_url + '\n' + _MANIFEST_HEADER + '\n'.join(result) + '\n')

if __name__ == '__main__':
    main()
